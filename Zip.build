<?xml version="1.0" encoding="iso-8859-1"?>

<project name="Zip" default="build" basedir=".">
    <tstamp/>
    <property name="debug" value="true"/>
    <property name="project.name" value="zip"/>
    <property name="project.FormalName" value="Zip"/>

    <property name="bin.dir" value="bin"/>
    <property name="src.dir" value="src"/>
    <property name="doc.dir" value="doc"/>
    <property name="examples.dir" value="examples"/>
	<property name="build.dir" value="build"/>
    <property name="dist.dir" value="${project.name}"/>

    <!-- Use script task to get this from AssemblyInfo.cs using a regular expression -->
    <property name="project.version" value="0.0.1"/>
    <script language="C#">
        <code><![CDATA[
		public static void ScriptMain(Project project) {
			string sourcePath = Path.Combine(project.BaseDirectory, Path.Combine(project.Properties["src.dir"], project.Properties["project.FormalName"]));
			string assemblyInfoFileName = Path.Combine(sourcePath, "AssemblyInfo.cs");
			StreamReader reader = File.OpenText(assemblyInfoFileName);

			Regex commentRE = new Regex("^(\\s)*//");
			Regex versionRE = new Regex("(?<=AssemblyVersion(\\s)*\\(\")\\d+\\.\\d+\\.\\d+");

			string line = reader.ReadLine();
			try {
				while (line != null) {
					// make sure the line has not been commented out
					if (!commentRE.Match(line).Success) {
						// find version string
						Match versionMatch = versionRE.Match(line);
						if (versionMatch.Success) {
							project.Properties["project.version"] = versionMatch.Value;
							break;
						}
					}
					line = reader.ReadLine();
				}
			} finally {
				// must remember to close the file or the compile may not work
				reader.Close();
			}
		}
	]]></code>
    </script>

    <property name="dist.name" value="${project.name}-src-${project.version}.zip"/>
    <property name="backup.name" value="..\${project.name}-backup-${nant.dstamp}-${nant.tstamp}.zip" />

    <echo message="Building ${project.name}-${project.version}"/>

	<target name="debug" depends="clean">
		<property name="debug" value="true"/>
	</target>

	<target name="release" depends="clean">
		<property name="debug" value="false"/>
	</target>

    <target name="clean">
        <delete dir="${build.dir}" verbose="true" failonerror="false"/>
        <delete dir="${dist.dir}" verbose="true" failonerror="false"/>
        <delete file="${dist.name}" verbose="true" failonerror="false"/>
        <delete file="${doc.dir}\${project.FormalName}.chm" verbose="true" failonerror="false"/>
    </target>

    <target name="build">
        <mkdir dir="${build.dir}"/>
		<!-- copy the assemblies required to build project to the build folder -->
        <copy todir="${build.dir}">
            <fileset basedir="bin">
               <includes name="zlib.dll"/>
               <includes name="NUnitCore.dll"/>
            </fileset>
        </copy>

		<!-- compile main project -->
        <csc target="library" output="${build.dir}\${project.FormalName}.dll" debug="${debug}" doc="${build.dir}\${project.FormalName}.xml">
            <sources basedir="${src.dir}\${project.FormalName}">
                <includes name="**/*.cs"/>
            </sources>
			<arg value="/unsafe"/>
        </csc>

		<!-- compile unit tests -->
		<csc target="library" output="${build.dir}\${project.FormalName}.Tests.dll" debug="${debug}">
			<sources basedir="${src.dir}\${project.FormalName}.Tests">
				<includes name="*.cs"/>
			</sources>
			<references>
				<includes name="${build.dir}/NUnitCore.dll"/>
				<includes name="${build.dir}/${project.FormalName}.dll"/>
			</references>
		</csc>

		<call target="test"/>
    </target>

	<target name="test">
		<!--
			Perform unit tests.  If a unit test fails, the build fails.
			The base directory is set to the Test directory so that tests can easily
			load external data files wihtout having to worry about complicated paths.
		-->

		<!-- copy the test data required to test the project to the build folder -->
        <copy todir="${build.dir}">
			<fileset basedir="${src.dir}\${project.FormalName}.Tests">
				<includes name="data\*"/>
			</fileset>
		</copy>

		<!-- perform unit test -->
		<nunit basedir="build" verbose="false">
            <test class="OrganicBit.Zip.Tests.AllTests" assembly="build\Zip.Tests.dll" />
		</nunit>
	
    </target>

	<target name="minizip" depends="build">

		<csc target="exe" output="${build.dir}\MiniZip.exe" debug="${debug}">
			<sources basedir="examples\MiniZip">
				<includes name="*.cs"/>
			</sources>
			<references>
				<includes name="${build.dir}/${project.FormalName}.dll"/>
			</references>
		</csc>
		<exec basedir="${build.dir}" program="build/MiniZip.exe" commandline="-v data/test.zip" />
		<exec basedir="${build.dir}/data" program="build/MiniZip.exe" commandline="-e test.zip" />
		<exec basedir="${build.dir}" program="build/MiniZip.exe" commandline="-a foobar.zip *.dll *.exe" />
	</target>

    <target name="doc" depends="build">
        <docnet outputDir="${build.dir}\docs" helpName="${project.FormalName}" showMissing="false" showPrivate="false">
            <assemblies basedir="${build.dir}">
                <includes name="${project.FormalName}.dll"/>
            </assemblies>
        </docnet>
        <copy file="${build.dir}/docs/${project.FormalName}.chm" todir="${build.dir}"/>
    </target>

    <target name="backup" depends="clean">
        <exec program="bin/zip.exe" commandline="-r -q ${backup.name} *"/>
    </target>

    <target name="dist">
        <!-- build a clean release distribution for release -->
        <property name="debug" value="false"/>
        <echo message="Debug = ${debug}"/>
        <call target="build"/>
        
		<!-- build developer documentation -->
        <call target="doc"/>

		<!-- copy files to make distribution -->
        <copy todir="${dist.dir}\bin">		
            <fileset basedir="${build.dir}">
				<includes name="*"/>
				<excludes name="NUnitCore.dll"/>
            </fileset>
		</copy>
        <copy todir="${dist.dir}">
            <fileset>
                <includes name="${doc.dir}/**"/>
                <includes name="${src.dir}/**"/>
                <includes name="${examples.dir}/**"/>
                <includes name="${project.FormalName}.build"/>
                <includes name="${project.FormalName}.key"/>
                <includes name="README.txt"/>
                <includes name="COPYING.txt"/>
            </fileset>
        </copy>

		<!-- create package -->
        <delete file="${dist.name}" failonerror="false"/>
        <exec program="bin/zip.exe" commandline="-r -q ${dist.name} ${dist.dir}/*"/>
    </target>
</project>
